AC_INIT([src/nekoldap.c])
AM_INIT_AUTOMAKE([nekoldap], [0.0.4])
AC_CANONICAL_HOST

dnl ----------------------------------------------------------------
dnl General "enable" options
AC_ARG_ENABLE(builtin-libraries, [  --enable-builtin-libraries 	  enable precompiled libraries (e.g. ldap, ssl, regexp)], [ builtin_libraries=yes ])dnl
dnl ----------------------------------------------------------------


dnl ----------------------------------------------------------------
dnl Checks MinGW32
case $host_os in
  *mingw32* ) ac_cv_mingw32=yes ;;
esac
dnl ----------------------------------------------------------------

dnl AC_PROG_CC
dnl AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL


HAXE_OS=Linux
HAXE_LIB_NAME=.libs/libnekoldap.so
HAXELIB_LIB_NAME=nekoldap.ndll

AC_SUBST(HAXE_OS)
AC_SUBST(HAXE_LIB_NAME)
AC_SUBST(HAXELIB_LIB_NAME)

if test "$ac_cv_mingw32" != yes ; then
  	if test "$builtin_libraries" = yes; then
  		AC_MSG_ERROR([Precompiled libraries are allowed only with MinGW32])
 	fi
else
	HAXE_LIB_NAME=../nekoldap.ndll
fi

dnl ------------------------------------------------------------------------
dnl HEADERS ----------------------------------------------------------------
dnl ------------------------------------------------------------------------

AC_CHECK_HEADERS( ldap.h )
if test "$ac_cv_header_ldap_h" != yes ; then
	AC_MSG_ERROR([ldap.h required.])
fi

AC_CHECK_HEADERS( neko.h )
if test "$ac_cv_header_neko_h" != yes ; then
	AC_MSG_ERROR([neko.h required.])
fi

AC_CHECK_HEADERS( ctype.h )
if test "$ac_cv_header_ctype_h" != yes ; then
	AC_MSG_ERROR([ctype.h required.])
fi

dnl ----------------------------------------------------------------



AM_CONDITIONAL([BUILTIN_LIBRARIES], [test "$builtin_libraries" = yes])

if test "$builtin_libraries" = yes; then
	
	AC_SUBST(STATIC_LIB_REGEX, ["\$(top_srcdir)/lib/libregex.a"])
	AC_SUBST(STATIC_LIB_CRYPTO, ["\$(top_srcdir)/lib/libcrypto.a"])
	AC_SUBST(STATIC_LIB_SSL, ["\$(top_srcdir)/lib/libssl.a"])
	AC_SUBST(STATIC_LIB_LBER, ["\$(top_srcdir)/lib/liblber.a"])
	AC_SUBST(STATIC_LIB_LDAP, ["\$(top_srcdir)/lib/libldap.a"])


	dnl ------------------------------------------------------------------------
	dnl WinSocks32 ----------------------------------------------------------------
	dnl ------------------------------------------------------------------------
	AC_MSG_CHECKING([WinSocks32]);
	save_LIBS="$LIBS"
	LIBS="$LIBS -lws2_32"
	AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <winsock.h>
		]], [[
		socket(0,0,0);
		select(0,NULL,NULL,NULL,NULL);
		closesocket(0);
		gethostname(NULL,0);
		]])],[winsock=yes],[winsock=no])
	
	if test $winsock != yes; then
		LIBS="$save_LIBS"
		AC_MSG_RESULT([no]);	
dnl		AC_MSG_ERROR([This package needs ws2_32 library])
	fi
	AC_MSG_RESULT([yes]);	
	dnl ------------------------------------------------------------------------

	dnl ------------------------------------------------------------------------
	dnl GDI32 ----------------------------------------------------------------
	dnl ------------------------------------------------------------------------
	AC_MSG_CHECKING([GDI32]);
	save_LIBS="$LIBS"
	LIBS="$LIBS -lgdi32"
	AC_LINK_IFELSE([AC_LANG_PROGRAM([[
			#include <windows.h>
			#include <wincrypt.h>
		]], [[
			CreateDC("", NULL, NULL, NULL);
		]])],[gdi=yes],[gdi=no])
	
	if test $gdi != yes; then
		LIBS="$save_LIBS"
		AC_MSG_RESULT([no]);	
dnl		AC_MSG_ERROR([This package needs gdi32 library])
	fi
	AC_MSG_RESULT([yes]);	
	dnl ------------------------------------------------------------------------

else
	AC_SEARCH_LIBS([regexec], [regex gnuregex rx], [], AC_MSG_ERROR([POSIX regex required.]))
	AC_SEARCH_LIBS([CRYPTO_get_new_lockid], [crypto], [], AC_MSG_ERROR([This package needs crypto library]))
	AC_SEARCH_LIBS([tls1_new], [ssl], [], AC_MSG_ERROR([This package needs ssl library]))
	AC_SEARCH_LIBS([ber_error_print], [lber], [], AC_MSG_ERROR([This package needs lber library]))
	AC_SEARCH_LIBS([ldap_get_option], [ldap], [], AC_MSG_ERROR([This package needs ldap library]))
fi

AC_SEARCH_LIBS([neko_alloc], [neko], [], AC_MSG_ERROR([This package needs neko library]))

AC_OUTPUT([Makefile src/Makefile])